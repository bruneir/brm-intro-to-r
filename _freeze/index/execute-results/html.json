{
  "hash": "7c4f3534bd3d58982931cdb7e3690e4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Introduction to R & RStudio\nsubtitle: Brunei R User Group Meetup ðŸ‡§ðŸ‡³\ndate: 1 June 2024\nauthor:\n  - name: Hafeezul Raziq\nexecute:\n  freeze: auto\n---\n\n::: {.cell}\n\n:::\n\n\n### `https://bruneir.github.io/brm-intro-to-r` {.unlisted}\n\n## Preliminaries\n\nWelcome to the 3rd Brunei R User Group meetup!\n\n::: {layout=\"[ 65, 35 ]\"}\n::: {#first-column}\n<br>\n\n> The RUGS mission is to facilitate the person-to-person exchange of knowledge in small group settings on a global scale. ---R Consortium\n:::\n\n::: {#second-column}\n![](https://bruneir.github.io/bruneiR-Rlogo.jpg)\n\n``` r\n\"R\" |> \n  rug(\"b\", _, \"unei\")\n```\n:::\n:::\n\n<u>About us</u>\n\n-   A group of UBD-ians and R enthusiasts\n-   We want to create a community of R users in Brunei\n-   Champion the Open Source cause\n\n<u>Past events</u>\n\n-   Analyzing Spatial Data using R \\[Workshop\\]\n-   R\\>aya Meetup Sharing Sessions\n\n## Expectations\n\n::: {.callout-warning title=\"Today's Plan\"}\nThis is a hands-on, live-coding, lecture-style \"workshop\". Expect to learn (or at the very least, see me do!)...\n\n1.  What is R & RStudio? How can it ease the burden of repeated reporting?\n2.  Basic functions for manipulating data\n3.  Using R effectively\n4.  More data manipulation\n5.  Visualizing data\n6.  A peek at advanced topics\n:::\n\n## 1. Introduction to R & RStudio\n\nWhen people consider switching to R, they usually think about it as a direct replacement for whatever tool they're currently using. While R can indeed replace software like Excel, SPSS, or Stata, it offers much more!\n\nSuppose a current workflow that looks like this,\n\n1.  Data analysis in SPSS (or a similar tool)\n2.  Data visualization in Excel\n3.  Report writing in Word\n\nHave you ever encountered an error in the first step and had to go back through all three steps to fix it? It's quite frustrating, isn't it?\n\nR can get around this by combining data analysis, visualization, and reporting in one tool using RMarkdown. Any time you realize you've made a mistake, you just rerun your code and you get a new report. Think of the time it can save you!\n\nHence, R is a popular programming language, especially in certain fields such as data science, academic research, and statistics.\n\nRStudio is an integrated development editor (IDE) for R. It is easier to write code using the editor.\n\nHere are several reasons why you should use R:\n\n1.  R is widely used among statisticians, especially academic statisticians.\n    -   If there is a new statistical procedure developed somewhere in academia, chances are that the code for it will be made available in R. This distinguishes R from, say, Python.\n2.  R is commonly used for statistical analyses in many disciplines.\n    -   Other software, such as SPSS or SAS is also used and in some disciplines would be the primary choice for some discipline specific courses, but R is popular and its user base is growing.\n3.  R is free.\n    -   You can install it and all optional packages on your computer at no cost. This is a big difference between R and SAS, SPSS, MATLAB, and most other statistical software.\n4.  R is has a vibrant and growing community.\n    -   With the advent of the tidyverse and RStudio, R is a vibrant and growing community. We also have found the community to be extremely welcoming. The R ecosystem is one of its strengths.\n\nIn this workshop, we will dive into the fundamentals of R and RStudio.\n\n## 2. Getting Started with R & RStudio\n\n::: {.callout-tip title=\"What we'll learn\"}\n-   Installing the R Language.\n-   Installing the RStudio.\n-   Exploring the RStudio Interface\n-   Packages & help() function\n:::\n\nFollow the guidelines in [Brunei R website](https://bruneir.github.io/) - Under blog, \"How to Install R and Rstudio\"\n\nOnce installed, launch RStudio and this is probably what you'll see.\n\n![](images/rs-no-project.png){fig-align=\"center\"}\n\nNotice the default panes:\n\n-   Console (entire left)\n-   Environment/History (tabbed in upper right)\n-   Files/Plots/Packages/Help (tabbed in lower right)\n\n![](images/rs-four-panels.png){fig-align=\"center\"}\n\n### Packages\n\nEverything which is done in R is done by functions. Commonly used functions are grouped in packages. Installing different packages expand the functionality of R.\n\nPackages are bundles of code that add new functions to R.\n\n-   Base packages are installed with R but not loaded by default.\n\n-   Contributed packages need to be downloaded, installed & loaded separately.\n\nTo install a package, say tidyverse, for the first time, type\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\nTo load the package, type the package name without quotation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nRecommended Packages\n\nFor data manipulation:\n\n-   `tidyverse` - An opinionated collection of R packages designed for data science that share an underlying design philosophy, grammar, and data structures. This collection includes all the packages in this section, plus many more for data import, tidying, and visualization listed here.\n\nFor data visualization:\n\n-   `ggplot2` - R's famous package for making beautiful graphics. `ggplot2` lets you use the grammar of graphics to build layered, customizable plots.\n\nFor reproducible reporting:\n\n-   `R Markdown` - The perfect workflow for reproducible reporting. Write R code in your markdown reports. When you run render, R Markdown will replace the code with its results and then export your report as an HTML, pdf, or MS Word document, or a HTML or pdf slideshow. The result? Automated reporting. R Markdown is integrated straight into RStudio.\n\nand many more...\n\n### Getting help\n\nTo access R's built-in help facility to get information on any function simply use the help() function. For example, to open the help page for our friend the mean() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\"mean\")\n```\n:::\n\n\nor you can use the equivalent shortcut.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\nAfter you run the code, the help page is displayed in the 'Help' tab in the Files pane (bottom right of RStudio).\n\n![](images/rs-help.png){fig-align=\"center\"}\n\nTo find what package a function belongs to, use the ?? operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n??survfit\n```\n:::\n\n\nor you can always google it!\n\n## 3. Basics of R Programming\n\n::: {.callout-tip title=\"What we'll learn\"}\n-   Data types in R\n-   Variables and assignment\n-   Basic arithmetic operations\n-   Working with vectors and basic vector operations\n:::\n\nImportant basics:\n\n-   R is case sensitive i.e. `A` is not the same as `a` and `anova` is not the same as `Anova`.\n\n-   Anything that follows a \\# symbol is interpreted as a comment and ignored by R. Comments should be used liberally throughout your code for both your own information and also to help your collaborators\n\n-   In general, R is fairly tolerant of extra spaces inserted into your code, in fact using spaces is actively encouraged. However, spaces should not be inserted into operators i.e. \\<- should not read \\< - (note the space).\n\n### Data types\n\nThere are 6 basic types of data in R; numeric, integer, logical, character, complex and raw. However, in this workshop we will not be covering complex and raw as it is usually not widely used.\n\n1.  [**Logical**]{.underline}\n    -   Logical data take on the value of either TRUE or FALSE. There's also another special type of logical called NA to represent missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- TRUE\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ny <- FALSE\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nz <- NA\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n[**Logical Operators**]{.underline}\n\nLogical operators are used to combine conditional statements:\n\n| Operator   | Operation    | Vectorized? | Element-wise Logical AND operator. It returns TRUE if both elements are TRUE |\n|------------|--------------|-------------|------------------------------------------------------------------------------|\n| `x|y`      | or           | Yes         |                                                                              |\n| `x & y`    | and          | Yes         |                                                                              |\n| `!x`       | not          | Yes         |                                                                              |\n| `x || y`   | or           | No          |                                                                              |\n| `x && y`   | and          | No          |                                                                              |\n| `xor(x,y)` | exclusive or | Yes         |                                                                              |\n\n[**Comparison Operators**]{.underline}\n\nComparison operators are used to compare two values:\n\n| Operator   | Comparison                | Vectorized? |\n|------------|---------------------------|-------------|\n| `x<y`      | less than                 | Yes         |\n| `x>y`      | greater than              | Yes         |\n| `x <= y`   | less than or equals to    | Yes         |\n| `x >= y`   | greater than or equals to | Yes         |\n| `x != y`   | not equals to             | Yes         |\n| `x == y`   | equals to                 | Yes         |\n| `x %in% y` | contains                  | Yes         |\n\n2.  [**Numeric**]{.underline}\n    -   Numeric data are real numbers that contain a decimal. The default numerical type are known as \"double\", which are floating point values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2.6\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.6\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n3.  [**Integers**]{.underline}\n    -   Integers are whole numbers (those numbers without a decimal point). It is represented by number and letter L: 1L, 2L, 3L.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1L\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n4.  [**Character**]{.underline}\n    -   Character data are used to represent string values. You can think of character strings as something like a word (or multiple words).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    x <- \"Hello, World\"\n    class(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\n    is.character(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nA special type of character string is a Factor, which is a string but with additional attributes (like levels or an order). For example, Low, Medium and High which are denoted as factors where the computer record them as by 1, 2 and 3 respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperf <- c(\"Low\", \"Medium\", \"High\")\nfactor(perf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Low    Medium High  \nLevels: High Low Medium\n```\n\n\n:::\n:::\n\n\nHere's a summary table of some of the logical test and coercion functions available to you.\n\n| **Type**  | **Logical test** | **Coercing**   |\n|-----------|------------------|----------------|\n| Logical   | `is.logical`     | `as.logical`   |\n| Double    | `is.numeric`     | `as.numeric`   |\n| Integer   | `is.integer`     | `as.integer`   |\n| Character | `is.character`   | `as.character` |\n| Factor    | `is.factor`      | `as.factor`    |\n| Complex   | `is.complex`     | `as.complex`   |\n\n### Variables and Assignment\n\nVariables in R are used to store data values. You can create a variable using the assignment operator \\<- or =.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_name <- \"Hafeezul\"\nheight <- 175.5\n\nfirst_name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hafeezul\"\n```\n\n\n:::\n\n```{.r .cell-code}\nheight\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 175.5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_name = \"Raziq\"\n\nlast_name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Raziq\"\n```\n\n\n:::\n:::\n\n\nIf you use just one equal sign, R will assign a value to an object. However, TWO equal signs would give a different function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 6   # This assigns the value 6 to x\nx == 5  # This checks to see if x equals 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n::: callout-note\nBest practice: Use \\<- for assignment to avoid confusion with the equality operator ==.\n:::\n\n### Basic Arithmetic Operations\n\nR supports basic arithmetic operations, which are similar to those in other programming languages.\n\n1.  [**Addition**]{.underline}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n2.  [**Subtraction**]{.underline}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 - 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n3.  [**Multiplication/Product**]{.underline}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n7 * 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35\n```\n\n\n:::\n:::\n\n\n4.  [**Division/Quotient**]{.underline}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n20 / 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n5.  [**Exponential**]{.underline}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n:::\n\n\n6.  [**Modulus**]{.underline}\n\n-   Returns the remainder of the division.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 %% 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n### Basic Vector Operations\n\nVectors can be combined using the concatenate c() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- c(1,2,3)\nnumbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrbaf <- c(\"Land Force\", \"Navy\", \"Air Force\")\nrbaf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Land Force\" \"Navy\"       \"Air Force\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- c(1:10, 15:20)\nnumbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10 15 16 17 18 19 20\n```\n\n\n:::\n:::\n\n\n[**`length()`**]{.underline}: Returns the number of elements in a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(rbaf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n:::\n\n\n[**`sum()`**]{.underline}: Returns the sum of all elements in a numeric vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 160\n```\n\n\n:::\n:::\n\n\n[**`mean()`**]{.underline}: Returns the average of the elements in a numeric vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\nUse [**`square brackets []`**]{.underline} to access elements by their index (starting from 1).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbaf[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Navy\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrbaf[-2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Land Force\" \"Air Force\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrbaf[1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Land Force\" \"Navy\"      \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers[11]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n\n## 10-MINUTE BREAK\n\n## 4. Data structures in R\n\n::: {.callout-tip title=\"What we'll learn\"}\n-   Introduction to matrices, arrays, data frames and list.\n-   Creating and manipulating data frames.\n-   Accessing elements in data structures.\n:::\n\nR offers various data structures for storing and manipulating data. The most commonly used ones are vector, matrices, arrays, data frames and list.\n\n1.  [**Matrix**]{.underline}\n    -   Matrix is a two-dimensional array. Alternatively, it is stacking multiple vectors of the same length.\n\nTo define a matrix from a vector, the syntax is `matrix(vector, nrow, ncol, byrow)`. `byrow` is the way we fill the array. It is either `TRUE` or `FALSE`.\n\nSize of matrix is rather complicated since it has two dimensions. There are three basics operations:\n\n-   **`length()`**: total number of elements\n\n-   **`ncol()`**: total number of columns\n\n-   **`nrow()`**: total number of rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- matrix(1:6, ncol = 2, byrow = TRUE)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(z) # check number of columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(z) # check number of rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nThe following code fills the matrix by column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(1:20, nrow=5, ncol=4, byrow=FALSE)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\n```\n\n\n:::\n:::\n\n\nExtracting elements from matrix is similar to extraction in vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[2,] #the second row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  7 12 17\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx[,1] #the first column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx[1,2] #first row, second column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- matrix(c(85, 90, 88, 75, 80, 78, 95, 85, 89), nrow = 3, ncol = 3, byrow = TRUE)\ncolnames(mat) <- c(\"Physical\", \"Shooting\", \"Strategy\")\nrownames(mat) <- c(\"Hasbul\", \"Khalid\", \"Fitri\")\n\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Physical Shooting Strategy\nHasbul       85       90       88\nKhalid       75       80       78\nFitri        95       85       89\n```\n\n\n:::\n:::\n\n\n2.  [**Array**]{.underline}\n\nArray behaves like matrix but it is multi-dimensional (more than 2). To define array from vector, the syntax is `array(vector/input, c(nrow, ncol, nmatrix))`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<- array(1:12, c(2,3,2))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n```\n\n\n:::\n:::\n\n\n3.  [**Data frame**]{.underline}\n    -   Data frame is most useful form of data type in R. It behaves like matrix but can contain vectors of different types. That is we can have vectors of characters and numeric together, which is not feasible under matrix or array.\n\n        To visualize a data frame, one may consider a spreadsheet: Each column is a vector and each spreadsheet is a data frame -- it is a collection of columns of cells.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# RBAF Personnel Data\nrbaf_df <- data.frame(\n  name = c(\"Hasbul\", \"Khalid\", \"Fitri\"),\n  rank = c(\"Lieutenant\", \"Sergeant\", \"Captain\"),\n  age = c(25, 30, 35)\n)\nrbaf_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    name       rank age\n1 Hasbul Lieutenant  25\n2 Khalid   Sergeant  30\n3  Fitri    Captain  35\n```\n\n\n:::\n:::\n\n\n\\`\\`\\`\n\nLet's add a column for years of service:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbaf_df$service <- c(2, 10, 5) # adding a new column for years of service\nrbaf_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    name       rank age service\n1 Hasbul Lieutenant  25       2\n2 Khalid   Sergeant  30      10\n3  Fitri    Captain  35       5\n```\n\n\n:::\n:::\n\n\nThe `$` operator is used to extract or subset a specific part of a data object in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbaf_df$name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hasbul\" \"Khalid\" \"Fitri\" \n```\n\n\n:::\n:::\n\n\nRemoving the 'Rank' column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbaf_df$rank <- NULL\nrbaf_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    name age service\n1 Hasbul  25       2\n2 Khalid  30      10\n3  Fitri  35       5\n```\n\n\n:::\n:::\n\n\nUse `rbind()` to add rows, such as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_row <- data.frame(name = \"Hafeezul\", age = 28, service = 1)\nrbaf_df <- rbind(rbaf_df, new_row)\n\nrbaf_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name age service\n1   Hasbul  25       2\n2   Khalid  30      10\n3    Fitri  35       5\n4 Hafeezul  28       1\n```\n\n\n:::\n:::\n\n\nRemove rows by sub-setting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbaf_df <- rbaf_df[-2, ]  # Removes the second row\n```\n:::\n\n\n## 5. Operators, Functions and Control Structures\n\n::: {.callout-tip title=\"What we'll learn\"}\n-   Introduction to functions\n-   Introduction to control structures (if-else statements, loops).\n-   Example applications of control structures and loops.\n:::\n\n### Functions\n\nFunctions are defined by two components: the arguments (formals) and the code (body).\n\nYou can create your own functions using the function keyword.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsquare <- function(x) {\n  return(x^2)\n}\n\nsquare(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n:::\n\n\n### Control structures\n\nControl structures are used to manage the flow of execution in R scripts.\n\n1.  `if-else` Statements\n\n-   Conditional execution based on a logical test\n\nHere is a common example for `if-else` statement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\n\nif(x < 0){\n  \"x is negative\"\n} else if (x > 0) {\n  \"x is positive\"\n} else {\n  \"x is zero\"\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x is positive\"\n```\n\n\n:::\n:::\n\n\nAnother example, determining if a soldier is eligible for a promotion based on years of service.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nservice <- 6\n\nif (service > 5) {\n  \"Eligible\"\n} else {\n  \"Not Eligible\"\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Eligible\"\n```\n\n\n:::\n:::\n\n\n2.  `for` Loops\n\nSimplest, and most common type of loop in R--given a vector iterate through the elements and evaluate the code block for each.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_even <- function(x) { \n  res <- c()\n  \nfor(val in x) {\nres <- c(res, val %% 2 == 0)\n}\n  \nres\n}\nis_even(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_even(seq(1, 5, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n3.  `while` loops\n\nRepeat until the given condition is not met (i.e. evaluates to `FALSE`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_seq <- function(from = 1, to = 1, by = 1) {\n  res <- c(from)\n  cur <- from\n  \n  while(cur + by <= to) {\n    cur = cur + by\n    res = c(res, cur)\n  }\n  \n  res\n}\n\nmake_seq(1, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_seq(1, 6, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5\n```\n\n\n:::\n:::\n\n\n[**Exercise**]{.underline}:\n\nWrite a set of conditional(s) that satisfies the following requirements,\n\n-   If `x` is greater than `3` and `y` is less than or equal to `3` then print \"Hello world!\"\n-   Otherwise if `x` is greater than `3` print \"!dlrow olleH\"\n-   If is `x` is less than or equal to `3` then print \"Something else...\"\n-   Stop execution if `x` is odd and `y` is even and report an error, don't print any of the text strings above.\n\nTest out your code by trying various values of `x` and `y`.\n\n## 10-MINUTE BREAK\n\n## 6. Data Import and Export\n\n::: {.callout-tip title=\"What we'll learn\"}\n-   Importing data from various file formats (CSV, Excel, etc.) into R.\n-   Exporting data from R to different file formats\n:::\n\nR provides various functions for importing data from different file formats, making it easy to work with external data sources.\n\n### Importing CSV files\n\nThe read.csv() function is used to read CSV files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitanic <- read.csv(\"~/Documents/github_local/brm-intro-to-r/data/titanic.csv\")\n```\n:::\n\n\n### Importing Excel files\n\nThe readxl package provides functions to read Excel files. Install the package (if not already installed) and load it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"readxl\")\nlibrary(readxl)\n\ntitanic <- read_excel(\"~/Documents/github_local/brm-intro-to-r/data/titanic.xlsx\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(titanic)  # Display the first few rows of the data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PassengerId Survived Pclass\n1           1        0      3\n2           2        1      1\n3           3        1      3\n4           4        1      1\n5           5        0      3\n6           6        0      3\n                                                 Name    Sex Age SibSp Parch\n1                             Braund, Mr. Owen Harris   male  22     1     0\n2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0\n3                              Heikkinen, Miss. Laina female  26     0     0\n4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0\n5                            Allen, Mr. William Henry   male  35     0     0\n6                                    Moran, Mr. James   male  NA     0     0\n            Ticket    Fare Cabin Embarked\n1        A/5 21171  7.2500              S\n2         PC 17599 71.2833   C85        C\n3 STON/O2. 3101282  7.9250              S\n4           113803 53.1000  C123        S\n5           373450  8.0500              S\n6           330877  8.4583              Q\n```\n\n\n:::\n:::\n\n\n## 7. Data Visualization\n\n::: {.callout-tip title=\"What we'll learn\"}\n-   Creating basic plots (scatter plots, bar plots, histograms, etc.).\n:::\n\nR provides powerful tools for data visualization, allowing you to create various types of plots to explore and present your data. Using the Titanic data set, we can create several common types of plots.\n\n1.  Scatter Plots:\n\nScatter plots are useful for visualizing the relationship between two variables. Lets plot the relationship between age and fare in the Titanic data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(titanic$Age, titanic$Fare, \n     main=\"Age vs. Fare\",\n     xlab=\"Age\", ylab=\"Fare\", pch=19)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n2.  Bar Plots\n\nBar plots are useful for comparing. We will visualize the count of passengers in each class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(table(\n  titanic$Pclass), \n        main=\"Count of Passengers by Class\", \n        xlab=\"Passenger Class\", ylab=\"Count\", col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n3.  Histograms\n\nHistograms are useful for visualizing the distribution of a single numeric variable. Lets plot the the distribution of ages in the Titanic data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(titanic$Age, \n     main=\"Distribution of Ages on the Titanic\", \n     xlab=\"Age\", col=\"green\", breaks=10)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n4.  Box Plots - Box plots are useful for visualizing the distribution and identifying outliers. Lets visualize the distribution of fares by passenger class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(Fare ~ Pclass, data=titanic , \n        main=\"Fares by Passenger Class\", \n        xlab=\"Passenger Class\", ylab=\"Fare\", col=\"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n## References\n\nR for the Rest of Us: https://book.rfortherestofus.com/\n\nTechincal Analysis with R (second edition): https://bookdown.org/kochiuyu/technical-analysis-with-r-second-edition2/\n\nProbability, Statistics, and Data: A fresh approach using R: https://mathstat.slu.edu/\\~speegle/\\_book/\n\nAn Introduction to R: https://intro2r.com/\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}